//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace iOPS_ETL
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class iOPS_NormalizedEntities : DbContext
    {
        public iOPS_NormalizedEntities()
            : base("name=iOPS_NormalizedEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<ChronologicalRawTagValueLogKepwareReceiver> ChronologicalRawTagValueLogKepwareReceivers { get; set; }
        public virtual DbSet<ChronologicalRawTagValueLogKepwareReceiverNewProcessor> ChronologicalRawTagValueLogKepwareReceiverNewProcessors { get; set; }
    
        public virtual int ChronologicalRawTagValueLogKepwareReceiverRecord(Nullable<System.DateTime> observationDateTime, Nullable<System.DateTime> creationDate, string value, Nullable<int> quality, string tagName, Nullable<int> debug, Nullable<int> notificationLevel)
        {
            var observationDateTimeParameter = observationDateTime.HasValue ?
                new ObjectParameter("observationDateTime", observationDateTime) :
                new ObjectParameter("observationDateTime", typeof(System.DateTime));
    
            var creationDateParameter = creationDate.HasValue ?
                new ObjectParameter("CreationDate", creationDate) :
                new ObjectParameter("CreationDate", typeof(System.DateTime));
    
            var valueParameter = value != null ?
                new ObjectParameter("value", value) :
                new ObjectParameter("value", typeof(string));
    
            var qualityParameter = quality.HasValue ?
                new ObjectParameter("Quality", quality) :
                new ObjectParameter("Quality", typeof(int));
    
            var tagNameParameter = tagName != null ?
                new ObjectParameter("tagName", tagName) :
                new ObjectParameter("tagName", typeof(string));
    
            var debugParameter = debug.HasValue ?
                new ObjectParameter("debug", debug) :
                new ObjectParameter("debug", typeof(int));
    
            var notificationLevelParameter = notificationLevel.HasValue ?
                new ObjectParameter("NotificationLevel", notificationLevel) :
                new ObjectParameter("NotificationLevel", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ChronologicalRawTagValueLogKepwareReceiverRecord", observationDateTimeParameter, creationDateParameter, valueParameter, qualityParameter, tagNameParameter, debugParameter, notificationLevelParameter);
        }
    }
}
